from datadog_checks.base import AgentCheck
import subprocess
import re

class SmartCheck(AgentCheck):
    def check(self, instance):
        devices = ["/dev/sd" + chr(letter) for letter in range(ord('a'), ord('z')+1)]

        for device in devices:
            try:
                output = subprocess.check_output(["smartctl", "-A", "-H", device], universal_newlines=True)
                model_info = subprocess.check_output(["smartctl", "-i", device], universal_newlines=True)

                model = re.search(r"Device Model:\s+(.*)", model_info)
                serial = re.search(r"Serial Number:\s+(.*)", model_info)

                tags = [
                    f"device:{device}",
                    f"model:{model.group(1).strip() if model else 'unknown'}",
                    f"serial:{serial.group(1).strip() if serial else 'unknown'}"
                ]

                # Health Status
                health = re.search(r"SMART overall-health self-assessment test result:\s+(\w+)", output)
                self.gauge("smart.device.health", 1 if health and health.group(1) == "PASSED" else 0, tags)

                metrics = {
                    "Reallocated_Sector_Ct": "smart.reallocated_sectors",
                    "Current_Pending_Sector": "smart.pending_sectors",
                    "Offline_Uncorrectable": "smart.offline_uncorrectable",
                    "Temperature_Celsius": "smart.temperature"
                }

                for line in output.splitlines():
                    for attr, metric in metrics.items():
                        if attr in line:
                            fields = line.split()
                            if len(fields) >= 10 and fields[0].isdigit():
                                self.gauge(metric, float(fields[9]), tags)

            except subprocess.CalledProcessError:
                self.log.warning(f"Device {device} not found or smartctl failed")
